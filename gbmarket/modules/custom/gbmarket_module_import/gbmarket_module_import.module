<?php

/**
 * Implement hook_commerce_product_type_info().
 *
 * Create 'module' product type which handle imported modules.
 */
function gbmarket_module_import_commerce_product_type_info() {
  return array(
    'module' => array(
      'type' => 'module',
      'name' => t('Module'),
      'description' => t('Handle imported modules to be used as product.'),
    ),
  );
}

/**
 * Create fields for 'module' products.
 *
 * Fields :
 *   field_module_description (text_long)
 *   field_module_categories (taxonomy module_categories)
 *   field_module_link (link)
 *   field_module_download_link (link)
 *   field_module_maintainers (text multiple)
 *   field_module_version (texte)
 *   field_module_release_date (datetime)
 *   field_module_release_notes (link)
 *   field_module_installs (integer min 0)
 *   field_module_rating (integer min 0, max 100)
 */
function gbmarket_module_import_product_rebuild() {
  $fields['field_module_description'] = array(
    'field_name' => 'field_module_description',
    'type' => 'text_with_summary',
    'entity_type' => 'commerce_product',
    'cardinality' => 1,
    'translatable' => 0,
    'module' => 'text',
    'settings' => array(),
  );
  $fields['field_module_categories'] = array(
    'field_name' => 'field_module_categories',
    'type' => 'taxonomy_term_reference',
    'entity_type' => 'commerce_product',
    'cardinality' => 1,
    'translatable' => 0,
    'module' => 'taxonomy',
    'settings' => array(
      'allowed_values' => array('vocabulary' => 'module_categories'),
    ),
  );
  $fields['field_module_link'] = array(
    'field_name' => 'field_module_link',
    'type' => 'link_field',
    'entity_type' => 'commerce_product',
    'cardinality' => 1,
    'translatable' => 0,
    'module' => 'link',
    'settings' => array(
      'url' => 0,
      'title' => 'optional',
      'title_maxlength' => 255,
      'attributes' => array('target' => 'default'),
      'display' => array('url_cutoff' => 80),
    ),
  );
  $fields['field_module_download_link'] = array(
    'field_name' => 'field_module_download_link',
    'type' => 'link_field',
    'entity_type' => 'commerce_product',
    'cardinality' => 1,
    'translatable' => 0,
    'module' => 'link',
    'settings' => array(
      'url' => 0,
      'title' => 'optional',
      'title_maxlength' => 255,
      'attributes' => array('target' => 'default'),
      'display' => array('url_cutoff' => 80),
    ),
  );
  $fields['field_module_maintainers'] = array(
    'field_name' => 'field_module_maintainers',
    'type' => 'text',
    'entity_type' => 'commerce_product',
    'cardinality' => -1,
    'translatable' => 0,
    'module' => 'text',
    'settings' => array(
      'max_length' => 255,
    ),
  );
  $fields['field_module_version'] = array(
    'field_name' => 'field_module_version',
    'type' => 'text',
    'entity_type' => 'commerce_product',
    'cardinality' => 1,
    'translatable' => 0,
    'module' => 'text',
    'settings' => array(
      'max_length' => 32,
    ),
  );
  $fields['field_module_release_date'] = array(
    'field_name' => 'field_module_release_date',
    'type' => 'datetime',
    'entity_type' => 'commerce_product',
    'cardinality' => 1,
    'translatable' => 0,
    'module' => 'date',
    'settings' => array(
      'granularity' => array(
        'year' => 'year',
        'month' => 'month',
        'day' => 'day',
        'hour' => 'hour',
        'minute' => 'minute',
        'seconde' => 0,
      ),
      'tz_handling' => 'utc',
      'timezone_db' => 'UTC',
      'cache_enabled' => 0,
    ),
  );
  $fields['field_module_release_notes'] = array(
    'field_name' => 'field_module_release_notes',
    'type' => 'link_field',
    'entity_type' => 'commerce_product',
    'cardinality' => 1,
    'translatable' => 0,
    'module' => 'link',
    'settings' => array(
      'url' => 0,
      'title' => 'optional',
      'title_maxlength' => 255,
      'attributes' => array('target' => 'default'),
      'display' => array('url_cutoff' => 80),
    ),
  );
  $fields['field_module_installs'] = array(
    'field_name' => 'field_module_installs',
    'type' => 'number_integer',
    'entity_type' => 'commerce_product',
    'cardinality' => 1,
    'translatable' => 0,
    'module' => 'number',
    'settings' => array(),
  );
  $fields['field_module_rating'] = array(
    'field_name' => 'field_module_rating',
    'type' => 'number_integer',
    'entity_type' => 'commerce_product',
    'cardinality' => 1,
    'translatable' => 0,
    'module' => 'number',
    'settings' => array(),
  );

  foreach ($fields as $field_name => $field) {
    $info = field_info_field($field_name);
    if (empty($info)) {
      field_create_field($field);
    }
  }

  $instances['field_module_description'] = array(
    'field_name' => 'field_module_description',
    'entity_type' => 'commerce_product',
    'bundle' => 'module',
    'label' => 'Description',
    'required' => FALSE,
    'widget' => array(
      'type' => 'text_textarea_with_summary',
      'module' => 'text',
      'settings' => array(
        'rows' => 20,
        'summary_rows' => 5,
      ),
    ),
    'settings' => array(
      'text_processing' => 1,
    ),
  );
  $instances['field_module_categories'] = array(
    'field_name' => 'field_module_categories',
    'entity_type' => 'commerce_product',
    'bundle' => 'module',
    'label' => 'Module category',
    'required' => FALSE,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'module' => 'taxonomy',
      'settings' => array(
        'size' => 60,
        'autocomplete_path' => 'taxonomy/autocompelte',
      ),
    ),
  );
  $instances['field_module_link'] = array(
    'field_name' => 'field_module_link',
    'entity_type' => 'commerce_product',
    'bundle' => 'module',
    'label' => 'Link',
    'required' => FALSE,
    'widget' => array(
      'type' => 'link_field',
      'module' => 'link',
    ),
    'settings' => array(
      'validate_url' => 0,
      'url' => 0,
      'title' => 'optional',
      'title_maxlength' => 255,
      'attributes' => array('target' => 'default'),
      'display' => array('url_cutoff' => 80),
    ),
  );
  $instances['field_module_download_link'] = array(
    'field_name' => 'field_module_download_link',
    'entity_type' => 'commerce_product',
    'bundle' => 'module',
    'label' => 'Download',
    'required' => FALSE,
    'widget' => array(
      'type' => 'link_field',
      'module' => 'link',
    ),
    'settings' => array(
      'validate_url' => 0,
      'url' => 0,
      'title_maxlength' => 255,
      'display' => array(
        'url_cutoff' => 80,
      ),
    ),
  );
  $instances['field_module_maintainers'] = array(
    'field_name' => 'field_module_maintainers',
    'entity_type' => 'commerce_product',
    'bundle' => 'module',
    'label' => 'Mainainers',
    'description' => 'Format: drupal_user_id,drupal_user_name',
    'required' => FALSE,
    'widget' => array(
      'type' => 'text_textfield',
      'module' => 'text',
    ),
    'settings' => array(
      'size' => 60,
    ),
  );
  $instances['field_module_version'] = array(
    'field_name' => 'field_module_version',
    'entity_type' => 'commerce_product',
    'bundle' => 'module',
    'label' => 'Version',
    'required' => FALSE,
    'widget' => array(
      'type' => 'text_textfield',
      'module' => 'text',
      'settings' => array(
        'size' => 30,
      ),
    ),
  );
  $instances['field_module_release_date'] = array(
    'field_name' => 'field_module_release_date',
    'entity_type' => 'commerce_product',
    'bundle' => 'module',
    'label' => 'Release date',
    'required' => FALSE,
    'widget' => array(
      'type' => 'date_text',
      'module' => 'date',
      'settings' => array(
        'input_format' => 'm/d/Y - H:i:s',
        'year_range' => '-3:+3',
        'label_position' => 'above',
      ),
    ),
  );
  $instances['field_module_release_notes'] = array(
    'field_name' => 'field_module_release_notes',
    'entity_type' => 'commerce_product',
    'bundle' => 'module',
    'label' => 'Release notes',
    'required' => FALSE,
    'widget' => array(
      'type' => 'link_field',
      'module' => 'link',
    ),
    'settings' => array(
      'validate_url' => 0,
      'url' => 0,
      'title_maxlength' => 255,
      'display' => array(
        'url_cutoff' => 80,
      ),
    ),
  );
  $instances['field_module_installs'] = array(
    'field_name' => 'field_module_installs',
    'entity_type' => 'commerce_product',
    'bundle' => 'module',
    'label' => 'Reported installs',
    'required' => FALSE,
    'default_value' => array(0),
    'widget' => array(
      'type' => 'number',
      'module' => 'number',
      'settings' => array(),
    ),
    'settings' => array(
      'min' => 0,
    ),
  );
  $instances['field_module_rating'] = array(
    'field_name' => 'field_module_rating',
    'entity_type' => 'commerce_product',
    'bundle' => 'module',
    'label' => 'Rating',
    'required' => FALSE,
    'default_value' => array(0),
    'widget' => array(
      'type' => 'number',
      'module' => 'number',
      'settings' => array(),
    ),
    'settings' => array(
      'min' => 0,
      'max' => 100,
      'suffix' => '%',
    ),
  );

  foreach ($instances as $field_name => $instance) {
    $info = field_info_instance('commerce_product', $field_name, 'module');
    if (empty($info)) {
      field_create_instance($instance);
    }
  }
}

/**
 * Implement hook_flush_caches().
 *
 * Attach fields to 'module' products.
 */
function gbmarket_module_import_flush_caches() {
  gbmarket_module_import_product_rebuild();
}

/**
 * Launch synchronization from drupalcommerce.org.
 */
function gbmarket_module_import_run() {
  $categories = xmlrpc('http://www.drupalcommerce.org', array('mod_info.listCategories' => array()));
  foreach ($categories as $category) {
    $modules = xmlrpc('http://www.drupalcommerce.org', array('mod_info.listModules' => array($category)));
    foreach ($modules as $module) {
      $module = xmlrpc('http://www.drupalcommerce.org', array('mod_info.getModule' => array($module)));
      _gbmarket_module_import_sync($module);
    }
  }
}

/**
 * Synchronize given @module with its product.
 *
 * Create/Update product of type module.
 *   Use sku as @module machine_name.
 *   Default price is 0.
 *
 * @module
 *   An array of module entity.
 */
function _gbmarket_module_import_sync($module) {
  if (!empty($module['name'])) {
    // Check if the module already exist.
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'commerce_product')
      ->propertyCondition('type', 'module')
      ->propertyCondition('sku', 'module' . $module['name'])
      ->execute();
    $is_new = empty($result);

    if ($is_new) {
      $product = commerce_product_new('module');
    }
    else {
      $entities = entity_load('commerce_product', array_keys($result['commerce_product']));
      $product = reset($entities);
    }
    $product_wrapper = entity_metadata_wrapper('commerce_product', $product);

    if ($is_new) {
      $product_wrapper->sku->set('module' . $module['name']);
      $product_wrapper->type->set('module');
    }
    $product_wrapper->title->set($module['title']);
    $product_wrapper->commerce_price->set(array('amount' => 0, 'currency_code' => 'USD'));

    $product->field_module_description[LANGUAGE_NONE][] = array(
      'value' => $module['description'],
      'format' => 'markdown'
    );

    $terms = taxonomy_get_term_by_name($module['type']);
    if (!empty($terms)) {
      $term = reset($terms);
    }
    else {
      $vocabularies = taxonomy_vocabulary_get_names();
      $term = (object) array(
        'vid' => $vocabularies['module_categories']->vid,
        'name' => $module['type'],
      );
      taxonomy_term_save($term);
    }
    $product->field_module_categories[LANGUAGE_NONE][] = array('tid' => $term->tid);

    $product->field_module_link[LANGUAGE_NONE][] = array('url' => $module['link'], 'title' => 'Link');
    $product->field_module_download_link[LANGUAGE_NONE][] = array(
      'url' => $module['download_link'],
      'title' => 'Download'
    );

    foreach (preg_split("/[\s]+/", $module['maintainers']) as $maintainer) {
      $product->field_module_maintainers[LANGUAGE_NONE][] = array('value' => $maintainer);
    }
    $product->field_module_version[LANGUAGE_NONE][] = array('value' => $module['version']);

    $date = date_create($module['release_date']);
    $product->field_module_release_date[LANGUAGE_NONE][] = array(
      'value' => $date->format('Y-m-d 00:00:00'),
      'timezone' => 'UTC'
    );

    $product->field_module_release_notes[LANGUAGE_NONE][] = array(
      'url' => $module['release_notes'],
      'title' => 'Notes'
    );
    $product->field_module_installs[LANGUAGE_NONE][] = array('value' => $module['reported_installs']);
    $product->field_module_installs[LANGUAGE_NONE][] = array('value' => $module['rating']);

    commerce_product_save($product);
  }
}
