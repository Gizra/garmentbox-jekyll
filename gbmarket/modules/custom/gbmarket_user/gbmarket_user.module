<?php
/**
 * @file
 */

include_once 'gbmarket_user.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function gbmarket_user_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_theme()
 */
function gbmarket_user_theme() {
  return array(
    'gbmarket_user_login_form' => array(
      'variables' => array(
        'register_form' => NULL,
        'login_form' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gbmarket_user_form_user_register_form_alter(&$form, $form_state) {
  $form['subtitle'] = array(
    '#markup' => '<h3>' . t('No credit card needed!') . '</h3>',
    '#weight' => -20,
  );

  $form['account']['name']['#required'] = FALSE;
  $form['account']['name']['#access'] = FALSE;

  $form['account']['mail']['#hint'] = $form['account']['mail']['#title'];
  $form['account']['mail']['#title'] = '';
  $form['account']['mail']['#description'] = '';

  $form['account']['pass']['#type'] = 'password';
  $form['account']['pass']['#hint'] = t('Password');
  $form['account']['pass']['#description'] = '';

  $form['field_company'][LANGUAGE_NONE][0]['value']['#hint'] = $form['field_company'][LANGUAGE_NONE][0]['value']['#title'];
  $form['field_company'][LANGUAGE_NONE][0]['value']['#title'] = '';

  $form['actions']['submit']['#prefix'] = '<span class="button">';
  $form['actions']['submit']['#suffix'] = '</span>';
  $form['actions']['submit']['#value'] = t('Start working');
}

/**
 * Implements hook_menu_alter().
 */
function gbmarket_user_menu_alter(&$items) {
  // Remove tabs on the login pages.
  $items['user/login']['type'] = MENU_NORMAL_ITEM;
  $items['user/login']['page callback'] = 'gbmarket_user_page';
  $items['user/register']['type'] = MENU_CALLBACK;
  $items['user/register']['page callback'] = 'gbmarket_user_page';
  $items['user/register']['page arguments'] = array('register');
  $items['user/password']['type'] = MENU_CALLBACK;
  $items['user']['page callback'] = 'gbmarket_user_page';
}

/**
 * Menu callback.
 * @see gbmarket_user_menu_alter().
 */
function gbmarket_user_page() {
  global $user;
  if ($user->uid) {
    menu_set_active_item('user/' . $user->uid);
    return menu_execute_active_handler(NULL, FALSE);
  }
  else {
    return gbmarket_user_login_page();
  }
}

function gbmarket_user_login_page() {
  $login_form = drupal_get_form('user_login');
  $register_form = drupal_get_form('user_register_form');
  $rendered_register_form = drupal_render($register_form);
  $rendered_login_form = drupal_render($login_form);
  $variables = array(
    'login_form' => $rendered_login_form,
    'register_form' => $rendered_register_form,
  );

  return theme('gbmarket_user_login_form', $variables);
}

function theme_gbmarket_user_login_form($variables) {
  $register_form = $variables['register_form'];
  $login_form = $variables['login_form'];

  $output = '<div class="login-form">';
  $output .= '<div id="register-form">' . $register_form . '</div>';
  $output .= '<div id="login-form">' . $login_form . '</div>';
  $output .= '</div>';

  return $output;
}

/**
 * Implements hook_form_alter().
 */
function gbmarket_user_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'contact_site_form') {
    drupal_set_title(t('Contact Us'));
  }

  if ($form_id == 'user_register_form') {
    $form['field_title']['#access'] = FALSE;
  }
  if ($form_id == 'user_login') {
    $form['name']['#title'] = 'E-mail';
  }
  if ($form_id == 'user_profile_form') {
    global $user;
    if (!(in_array('administrator', $user->roles) || in_array('webmaster', $user->roles))) {
      foreach (array('mimemail', 'timezone', 'contact', 'field_salesforce_account_id') as $item) {
        $form[$item]['#access'] = FALSE;
      }
    }
  }
  if ($form_id == 'commerce_addressbook_customer_profile_form') {
    $form['profile_status']['#access'] = FALSE;
    $form['additional_settings']['#access'] = FALSE;
    $form['actions']['submit']['#submit'][] = 'commerce_addressbook_customer_profile_form_submit_redirect';
  }
}

/**
 * Custom submit handler; Redirect user to the addressbook.
 */
function commerce_addressbook_customer_profile_form_submit_redirect(&$form, &$form_state) {
  $form_state['redirect'] = 'user/' . $form['#entity']->uid . '/addressbook';
}

/**
 * Implements hook_user_insert().
 */
function gbmarket_user_user_insert(&$edit, &$account, $category = NULL) {
  // Other modules may implement hook_email_registration_name($edit, $account)
  // to generate a username (return a string to be used as the username, NULL
  // to have email_registration generate it).
  $names = module_invoke_all('email_registration_name', $edit, $account);
  // Remove any empty entries.
  $names = array_filter($names);

  if (empty($names)) {
    // Default implementation of name generation.
    $new_name =$edit['mail'];
  }
  else {
    // One would expect a single implementation of the hook, but if there
    // are multiples out there use the last one.
    $new_name = array_pop($names);
  }

  // Replace with generated username.
  db_update('users')
    ->fields(array('name' => $new_name))
    ->condition('uid', $account->uid)
    ->execute();

  $edit['name'] = $new_name;

  // If email verification is off and a new user is the one creating an account,
  // log the new user in with his correct name.
  global $user;
  if (!variable_get('user_email_verification', 1) && $user->uid == 0) {
    $user = $account;
    $user->name = $new_name;
  }
  $account->name = $new_name;
  return;
}

/**
 * Implements hook_user_view().
 */
function gbmarket_user_user_view($account, $view_mode, $langcode) {

  $account->content['information'] =  array(
    '#type' => 'user_profile_category',
    '#title' => t('Account information'),
    '#markup' => '',
    '#attributes' => array('class' => array('user-information', 'clearfix')),
  );
  $fields = array(
    'field_company', 'field_first_name', 'field_last_name',
    'field_phone', 'field_title', 'field_url', 'field_marketing_materials',
    'field_user_audience');
  if (!empty($account->field_marketing_materials[LANGUAGE_NONE][0]) && $account->field_marketing_materials[LANGUAGE_NONE][0]['value'] != 0) {
    $account->content['field_marketing_materials'][0]['#markup'] = t('Yes, I wish to receive special offers and information from Commerce Guys');
    $account->content['field_marketing_materials']['#label_display'] = 'hidden';
  }
  else {
    unset($account->content['field_marketing_materials']);
  }

  $content = NULL;
  foreach ($fields as $field) {
    $content .= drupal_render($account->content[$field]);
  }
  $account->content['information']['personal_informations'] =  array(
    '#type' => 'user_profile_item',
    '#title' => t('Personal information'),
    '#markup' => $content . l(t('Manage my informations'), 'user/' . $account->uid . '/edit', array('attributes' => array('class' => array('manage-link')))),
    '#attributes' => array('class' => array('personal-informations')),
  );
  $billing_profile_id = NULL;

  if (module_exists('commerce_addressbook')) {
    $billing_profile_id = commerce_addressbook_get_default_profile_id($account->uid, 'billing');
  }
  if ($billing_profile_id) {
    $billing_profile = commerce_customer_profile_load($billing_profile_id);
    $billing_profile_render = entity_view('commerce_customer_profile', array($billing_profile), 'full');
    $billing_profile_render = reset($billing_profile_render);
    $billing_profile_output = drupal_render($billing_profile_render);
  }
  else {
    $billing_profile_output = '<p>' . t('No default billing profile') . '</p>';
  }
  $account->content['information']['billing_profile'] =  array(
    '#type' => 'user_profile_item',
    '#title' => t('Primary billing address'),
    '#markup' => $billing_profile_output  . l(t('Manage billing address'), 'user/' . $account->uid . '/addressbook/billing', array('attributes' => array('class' => array('manage-link')))),
    '#attributes' => array('class' => array('billing-address')),
  );
 $account->content['information']['billing_profile'] =  array(
    '#type' => 'user_profile_item',
    '#title' => t('Primary billing address'),
    '#markup' => $billing_profile_output  . l(t('Manage billing address'), 'user/' . $account->uid . '/addressbook/billing', array('attributes' => array('class' => array('manage-link')))),
    '#attributes' => array('class' => array('billing-address')),
  );

  $account->content['information']['mail'] = array(
    '#type' => 'user_profile_item',
    '#title' => t('Email address'),
    '#markup' => '<p>' . $account->mail . '</p>' . l(t('Update email/password'), 'user/' . $account->uid . '/edit', array('attributes' => array('class' => array('manage-link')))),
    '#attributes' => array('class' => array('mail')),
  );

  $account->content['recent_orders'] =  array(
    '#type' => 'user_profile_category',
    '#title' => t('Recent orders'),
    '#markup' => '',
    '#attributes' => array('class' => array('user-recent-orders', 'clearfix')),
    '#weight' => 20,
  );

  $account->content['recent_orders']['view'] = array(
    '#type' => 'user_profile_item',
    '#title' => '',
    '#markup' => views_embed_view('commerce_backoffice_user_orders', 'block_1', $account->uid),
    '#attributes' => array('class' => array('recent-orders')),
  );
}

/**
 * Implements hook_user_view_alter().
 *
 * Hide other infos.
 */
function gbmarket_user_user_view_alter(&$build) {
  if (isset($build['mimemail'])) {
    unset($build['mimemail']);
  }
  if (isset($build['summary'])) {
    unset($build['summary']);
  }
  if (isset($build['openid'])) {
    unset($build['openid']);
  }
}
